package com.acs560.restaurantsales.restaurant_sales.services.impl;

import com.acs560.restaurantsales.restaurant_sales.models.Sales;
import com.acs560.restaurantsales.restaurant_sales.repositories.SalesRepository;
import com.acs560.restaurantsales.restaurant_sales.services.SalesAnalysisService;
import org.springframework.stereotype.Service;

import java.util.List;

/**
 * Implementation of SalesAnalysisService.
 */
@Service
public class SalesAnalysisServiceImpl implements SalesAnalysisService {

    // Inject the SalesRepository
    private final SalesRepository salesRepository;

    // Constructor-based injection
    public SalesAnalysisServiceImpl(SalesRepository salesRepository) {
        this.salesRepository = salesRepository;
    }

    @Override
    public double calculateAverageSalesByItem(String itemName) {
        List<Sales> sales = salesRepository.getSales()
                .stream()
                .filter(sale -> sale.getItemName().equalsIgnoreCase(itemName))
                .toList();

        return sales.stream()
                .mapToDouble(Sales::getTransactionAmount)
                .average()
                .orElse(0.0);  // Return 0.0 if no sales for the item
    }

    @Override
    public double calculateMaxSalesByItem(String itemName) {
        List<Sales> sales = salesRepository.getSales()
                .stream()
                .filter(sale -> sale.getItemName().equalsIgnoreCase(itemName))
                .toList();

        return sales.stream()
                .mapToDouble(Sales::getTransactionAmount)
                .max()
                .orElse(0.0);  // Return 0.0 if no sales for the item
    }

    @Override
    public double calculateMinSalesByItem(String itemName) {
        List<Sales> sales = salesRepository.getSales()
                .stream()
                .filter(sale -> sale.getItemName().equalsIgnoreCase(itemName))
                .toList();

        return sales.stream()
                .mapToDouble(Sales::getTransactionAmount)
                .min()
                .orElse(0.0);  // Return 0.0 if no sales for the item
    }
}
