package com.acs560.restaurantsales.restaurant_sales.services.impl;

import com.acs560.restaurantsales.restaurant_sales.repositories.SalesRepository;
import com.acs560.restaurantsales.restaurant_sales.services.SalesAnalysisService;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class SalesAnalysisServiceImpl implements SalesAnalysisService {

    private final SalesRepository salesRepository;

    // Constructor injection for repository
    public SalesAnalysisServiceImpl(SalesRepository salesRepository) {
        this.salesRepository = salesRepository;
    }

    @Override
    public double calculateAverageSalesByItem(String itemName, String month) {
        // Implementation for calculating average sales for an item in a specific month
        List<Sales> sales = salesRepository.getSales()
            .stream()
            .filter(sale -> sale.getItemName().equalsIgnoreCase(itemName)
                         && sale.getYearMonth().equals(month))
            .toList();

        return sales.stream()
            .mapToDouble(Sales::getTransactionAmount)
            .average()
            .orElse(0.0);
    }

    @Override
    public double calculateAverageSalesByItem(String itemName, String month, int range) {
        // Implementation for calculating average sales with a range
        List<Sales> sales = salesRepository.getSales()
            .stream()
            .filter(sale -> sale.getItemName().equalsIgnoreCase(itemName)
                         && sale.getYearMonth().equals(month))
            .limit(range)  // Example: applying the range filter
            .toList();

        return sales.stream()
            .mapToDouble(Sales::getTransactionAmount)
            .average()
            .orElse(0.0);
    }
}
